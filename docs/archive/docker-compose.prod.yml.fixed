# Multi-stage production Docker Compose configuration for WillowCMS
# Optimized for production deployment with security, performance, and monitoring

version: '3.8'

services:
  willowcms:
    build:
      context: .
      dockerfile: Dockerfile  # Using the fixed Dockerfile with PHP extensions
      args:
        - UID=${DOCKER_UID:-1001}
        - GID=${DOCKER_GID:-1001}
        - BUILD_ENV=prod
    ports:
      - "${WILLOWCMS_HTTP_PORT:-8080}:8080"
    environment:
      APP_PORT: 8080
      DB_HOST: mysql
      DB_DATABASE: ${MYSQL_DATABASE}
      DB_USERNAME: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TEST_DB_HOST: mysql
      REDIS_HOST: redis
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_DEBUG_PATH: ${LOG_DEBUG_PATH:-/var/www/willowcms/logs}
      LOG_ERROR_PATH: ${LOG_ERROR_PATH:-/var/www/willowcms/logs}
      LOG_QUERIES_PATH: ${LOG_QUERIES_PATH:-/var/www/willowcms/logs}
      LOG_ADMIN_ACTIONS_PATH: ${LOG_ADMIN_ACTIONS_PATH:-/var/www/willowcms/logs}
      LOG_DEBUG_FILE: ${LOG_DEBUG_FILE:-debug}
      LOG_ERROR_FILE: ${LOG_ERROR_FILE:-error}
      LOG_QUERIES_FILE: ${LOG_QUERIES_FILE:-queries}
      LOG_ADMIN_ACTIONS_FILE: ${LOG_ADMIN_ACTIONS_FILE:-bulk_actions}
      LOG_DEBUG_LEVELS: ${LOG_DEBUG_LEVELS:-notice,info,debug}
      LOG_ERROR_LEVELS: ${LOG_ERROR_LEVELS:-warning,error,critical,alert,emergency}
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_started
    volumes:
      - ${WILLOWCMS_LOGS_VOLUME:-willowcms_logs:/var/www/willowcms/logs}
      - ${WILLOWCMS_TMP_VOLUME:-willowcms_tmp:/var/www/willowcms/tmp}
    restart: unless-stopped
    env_file:
      - ./.env

  # Redis for session storage and caching
  redis:
    build:
      context: ./docker/redis
      dockerfile: Dockerfile
    environment:
      TZ: ${APP_DEFAULT_TIMEZONE:-America/Chicago}
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD}"
      --appendonly yes
      --save "900 1 300 10 60 10000"
      --maxmemory 96m
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$REDIS_PASSWORD\" ping | grep PONG"]
      interval: ${REDIS_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${REDIS_HEALTHCHECK_TIMEOUT:-3s}
      retries: ${REDIS_HEALTHCHECK_RETRIES:-5}
    volumes:
      - ${REDIS_DATA_VOLUME:-redis-data:/data}
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped
    env_file:
      - ./.env

  # MySQL database
  mysql:
    image: mysql:${MYSQL_IMAGE_TAG:-8.0}
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # Optimized for 2GB RAM environment
      MYSQL_INNODB_LOG_FILE_SIZE: ${MYSQL_INNODB_LOG_FILE_SIZE:-64M}
      MYSQL_INNODB_BUFFER_POOL_SIZE: ${MYSQL_INNODB_BUFFER_POOL_SIZE:-384M}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped
    env_file:
      - ./.env
    command: >
      --default-authentication-plugin=mysql_native_password
      --log-error=/var/log/mysql/error.log
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long_query_time=2
      --log-queries-not-using-indexes=1
      --innodb-log-file-size=${MYSQL_INNODB_LOG_FILE_SIZE:-64M}
      --innodb-buffer-pool-size=${MYSQL_INNODB_BUFFER_POOL_SIZE:-384M}
      --innodb-buffer-pool-instances=1
      --innodb-flush-method=O_DIRECT
      --innodb-log-buffer-size=16M
      --max-connections=100
      --table-open-cache=256
      --query-cache-type=0
      --query-cache-size=0
      --innodb-file-per-table=1
      --innodb-flush-log-at-trx-commit=2
      --sync-binlog=0
    volumes:
      - ${MYSQL_DATA_VOLUME:-mysql_data:/var/lib/mysql}
    profiles:
      - production

  # phpMyAdmin (for database management - use carefully in production)
  phpmyadmin:
    image: phpmyadmin:${PHPMYADMIN_IMAGE_TAG:-latest}
    ports:
      - "${PHPMYADMIN_HTTP_PORT:-8082}:80"
    depends_on:
      - mysql
    environment:
      - PMA_HOST=mysql
      - PMA_USER=${PMA_USER:-root}
      - PMA_PASSWORD=${PMA_PASSWORD}
      - UPLOAD_LIMIT=${UPLOAD_LIMIT:-300M}
    deploy:
      resources:
        limits:
          memory: 128M
    restart: unless-stopped
    env_file:
      - ./.env
    profiles:
      - debug  # Only start when explicitly requested: docker-compose --profile debug up

  # Optional: Email testing (disable in production)
  mailpit:
    image: axllent/mailpit:${MAILPIT_IMAGE_TAG:-latest}
    ports:
      - "${MAILPIT_SMTP_PORT:-1125}:1025"
      - "${MAILPIT_HTTP_PORT:-8025}:8025"
    environment:
      - MP_MAX_MESSAGES=${MP_MAX_MESSAGES:-1000}
      - MP_DATABASE=${MP_DATABASE:-/data/mailpit.db}
      - MP_SMTP_AUTH_ACCEPT_ANY=${MP_SMTP_AUTH_ACCEPT_ANY:-1}
      - MP_SMTP_AUTH_ALLOW_INSECURE=${MP_SMTP_AUTH_ALLOW_INSECURE:-1}
    deploy:
      resources:
        limits:
          memory: 64M
    restart: unless-stopped
    profiles:
      - debug

  # Optional: Redis Commander (disable in production)
  redis-commander:
    image: rediscommander/redis-commander:${REDIS_COMMANDER_IMAGE_TAG:-latest}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "${REDIS_COMMANDER_HTTP_PORT:-8084}:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - HTTP_USER=${REDIS_COMMANDER_USERNAME:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 64M
    restart: unless-stopped
    profiles:
      - debug

volumes:
  mysql_data:
    driver: local
  redis-data:
    driver: local

# Production deployment commands:
# docker-compose --profile production up -d
