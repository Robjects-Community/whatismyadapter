# syntax=docker/dockerfile:1.7
# Multi-stage Dockerfile for WillowCMS
# Based on hardened Alpine PHP 8.3 image with optimized layer caching

# ==============================================================================
# Build arguments for multi-platform support
# These must be declared at the top level before any FROM statements
# ==============================================================================
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG UID=1000
ARG GID=1000

# ==============================================================================
# Stage 1: Composer - Provides deterministic composer binary
# ==============================================================================
FROM composer:2 AS composer

# ==============================================================================
# Stage 2: Node Assets Builder (optional - remove if no frontend assets)
# ==============================================================================
# Re-declare ARG after FROM to make it available in this stage
ARG BUILDPLATFORM
FROM node:20-alpine AS node-assets

WORKDIR /workspace

# Copy package files for caching
# COPY ./app/package*.json ./
# RUN --mount=type=cache,target=/root/.npm npm ci

# Copy source and build assets
# COPY ./app ./
# RUN npm run build

# Note: If you don't have Node assets, you can safely remove this stage
# and the COPY from node-assets in the production stage

# ==============================================================================
# Stage 3: Builder - Development dependencies and build-time tasks
# ==============================================================================
# Re-declare ARG after FROM to make it available in this stage
ARG BUILDPLATFORM
FROM robjects/dhi-php-mirror-robjects:8.3-alpine3.22-dev AS builder

ARG UID
ARG GID
ENV APP_DIR=/var/www/html
ENV COMPOSER_ALLOW_SUPERUSER=1

WORKDIR $APP_DIR

# Copy composer from official image
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

# Install build-time dependencies only (minimal set for Composer operations)
RUN apk add --no-cache \
    git \
    zip \
    unzip \
    bash

# Copy application code with existing vendor directory
# Note: This app already has vendor installed locally
COPY ./app $APP_DIR/

# Run CakePHP optimization tasks if composer.json exists
RUN if [ -f composer.json ]; then \
        composer dump-autoload --optimize || true; \
    fi

# Optional: Run CakePHP cache warming
# RUN bin/cake cache clear_all || true
# RUN bin/cake orm_cache build || true
# ==============================================================================
# Stage 4: Dependencies - Production-only Composer packages
# ==============================================================================
# Re-declare ARG after FROM to make it available in this stage
ARG BUILDPLATFORM
ARG TARGETPLATFORM
FROM robjects/dhi-php-mirror-robjects:8.3-alpine3.22-dev AS deps

ENV APP_DIR=/var/www/html
ENV COMPOSER_ALLOW_SUPERUSER=1

WORKDIR $APP_DIR

# Copy composer from official image
COPY --from=composer /usr/bin/composer /usr/local/bin/composer

# Install git (required for some composer packages)
RUN apk add --no-cache git

# Copy the entire app directory with existing vendor
# Note: The vendor directory is already installed locally
COPY ./app $APP_DIR/

# If composer.json exists, optimize autoloader for production
RUN if [ -f composer.json ]; then \
        composer dump-autoload --no-dev --optimize || true; \
    fi

# ==============================================================================
# Stage 5: Production - Final hardened runtime image
# ==============================================================================
FROM robjects/dhi-php-mirror-robjects:8.3-alpine3.22-dev AS production

ARG UID=1000
ARG GID=1000

ENV UID=${UID}
ENV GID=${GID}
ENV APP_DIR=/var/www/html
ENV APP_ENV=production
ENV PHP_INI_DIR=/etc/php83

# Setup document root
WORKDIR $APP_DIR

# Install runtime packages (matching your current Dockerfile)
RUN apk add --no-cache \
    redis \
    curl \
    imagemagick \
    nginx \
    mysql-client \
    php83 \
    php83-ctype \
    php83-curl \
    php83-dom \
    php83-fileinfo \
    php83-fpm \
    php83-gd \
    php83-intl \
    php83-mbstring \
    php83-mysqli \
    php83-opcache \
    php83-openssl \
    php83-phar \
    php83-session \
    php83-tokenizer \
    php83-xml \
    php83-xmlreader \
    php83-xmlwriter \
    php83-pecl-imagick \
    php83-pcntl \
    php83-pecl-msgpack \
    php83-redis \
    php83-zip \
    php83-pdo_mysql \
    php83-bcmath \
    php83-sockets \
    php83-cli \
    php83-pdo_sqlite \
    php83-simplexml \
    php83-pecl-xdebug \
    bash \
    wget \
    unzip && \
    rm -rf /var/cache/apk/*

# Configure Redis with environment variables (secrets should come from .env)
RUN echo "bind 0.0.0.0" >> /etc/redis.conf && \
    echo "# Redis password and user config should be set via environment variables" >> /etc/redis.conf

# Copy runtime configuration from infrastructure
COPY infrastructure/docker/willowcms/config/nginx/nginx.conf /etc/nginx/nginx.conf
COPY infrastructure/docker/willowcms/config/nginx/nginx-cms.conf /etc/nginx/conf.d/default.conf

# Configure PHP-FPM
COPY infrastructure/docker/willowcms/config/php/fpm-pool.conf ${PHP_INI_DIR}/php-fpm.d/www.conf
COPY infrastructure/docker/willowcms/config/php/php.ini ${PHP_INI_DIR}/conf.d/custom.ini

# Configure PHP extensions for the base image PHP installation
# Note: igbinary and msgpack must be loaded before redis since redis depends on them
RUN echo "extension=/usr/lib/php83/modules/igbinary.so" > /opt/php-8.3/etc/php/conf.d/igbinary.ini && \
    echo "extension=/usr/lib/php83/modules/msgpack.so" > /opt/php-8.3/etc/php/conf.d/msgpack.ini && \
    echo "extension=/usr/lib/php83/modules/redis.so" > /opt/php-8.3/etc/php/conf.d/redis.ini && \
    echo "extension=/usr/lib/php83/modules/imagick.so" > /opt/php-8.3/etc/php/conf.d/imagick.ini && \
    echo "extension=/usr/lib/php83/modules/pdo_mysql.so" > /opt/php-8.3/etc/php/conf.d/pdo_mysql.ini && \
    echo "extension=/usr/lib/php83/modules/mysqli.so" > /opt/php-8.3/etc/php/conf.d/mysqli.ini

# Create startup script (inline for visibility and maintainability)
RUN mkdir -p /usr/local/bin && \
    echo '#!/bin/bash' > /usr/local/bin/start-services.sh && \
    echo 'set -e' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Starting services as user: $(whoami)"' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Starting PHP-FPM..."' >> /usr/local/bin/start-services.sh && \
    echo 'php-fpm83 -F &' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Starting Nginx..."' >> /usr/local/bin/start-services.sh && \
    echo 'exec nginx -g "daemon off;"' >> /usr/local/bin/start-services.sh && \
    chmod +x /usr/local/bin/start-services.sh

# Update the nobody user with the provided UID and GID
RUN deluser nobody 2>/dev/null || true && \
    delgroup nobody 2>/dev/null || true && \
    if ! getent group ${GID} >/dev/null 2>&1; then \
    addgroup -g ${GID} -S nobody; \
    else \
    addgroup -S nobody; \
    fi && \
    adduser -u ${UID} -S -G nobody nobody

# Copy application code with vendor directory from deps stage
COPY --from=deps --chown=nobody:nobody /var/www/html $APP_DIR/

# Optional: Copy built frontend assets from node-assets stage
# Uncomment if you have a Node build stage active
# COPY --from=node-assets --chown=nobody:nobody /workspace/dist $APP_DIR/webroot/

# Create and configure runtime directories with proper permissions
RUN mkdir -p \
    /var/www/html/tmp/archives \
    /var/www/html/webroot/files/ImageGalleries/preview \
    /run \
    /var/lib/nginx \
    /var/log/nginx \
    /tmp/redis && \
    chown -R nobody:nobody \
    /var/www/html \
    /run \
    /var/lib/nginx \
    /var/log/nginx \
    /tmp/redis && \
    chmod 755 /usr/local/bin/start-services.sh

# Switch to non-root user
USER nobody

# Expose the port nginx is reachable on
EXPOSE 80

# Start services
CMD ["/usr/local/bin/start-services.sh"]

# Configure healthcheck to validate that everything is up & running
HEALTHCHECK --timeout=10s CMD curl --silent --fail http://127.0.0.1:80/fpm-ping || exit 1
