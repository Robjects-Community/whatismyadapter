# syntax=docker/dockerfile:1.7
# ==============================================================================
# Enhanced Multi-Stage WillowCMS Dockerfile
# ==============================================================================
# Description:
#   Production-ready CakePHP 5.x application with multi-stage optimization
#   
# Features:
#   - Multi-stage builds for minimal image size
#   - Multi-platform support (AMD64/ARM64)
#   - Security hardening with non-root user
#   - No hardcoded secrets (uses environment variables)
#   - Optimized Composer autoloader
#   - Health checks for container orchestration
#   - PHP 8.3 with all required extensions
#   - Nginx + PHP-FPM production setup
#
# Security:
#   - All sensitive values must be provided via .env or stack.env files
#   - No hardcoded passwords, secrets, or credentials
#   - Runs as non-root user (willowcms)
#   - Minimal attack surface with Alpine Linux
#
# Usage:
#   Build: docker build -f Dockerfile.enhanced -t willowcms:enhanced .
#   Run: docker compose up -d
# ==============================================================================

# ==============================================================================
# Build Arguments - Must be declared at top level before any FROM statements
# ==============================================================================
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG UID=1000
ARG GID=1000

# ==============================================================================
# Stage 1: Composer Binary
# ==============================================================================
# Purpose: Provides a clean, deterministic composer binary
# Why: Official composer image ensures we get the latest stable version
# ==============================================================================
FROM composer:2 AS composer-binary

# No additional configuration needed - we just extract the binary

# ==============================================================================
# Stage 2: Dependency Builder
# ==============================================================================
# Purpose: Install and optimize Composer dependencies
# Why: Separating dependency installation from runtime reduces final image size
# ==============================================================================
FROM robjects/dhi-php-mirror-robjects:8.3-alpine3.22-dev AS dependencies

# Re-declare ARGs for this stage
ARG UID
ARG GID

# Environment configuration
ENV APP_DIR=/var/www/html
ENV COMPOSER_ALLOW_SUPERUSER=1

WORKDIR $APP_DIR

# Copy composer binary from official image
COPY --from=composer-binary /usr/bin/composer /usr/local/bin/composer

# Install minimal build-time dependencies and required PHP extensions
# git: Required for composer to fetch dependencies from git repositories
# zip/unzip: Required for composer to handle zipped packages
# bash: Required for composer scripts
# PHP extensions: Required by composer.json/composer.lock validation
RUN apk add --no-cache \
    git \
    zip \
    unzip \
    bash \
    # PHP extensions needed for Composer dependency resolution
    php83-redis \
    php83-pecl-msgpack \
    php83-pdo_mysql \
    php83-mysqli

# Copy application files
# Note: The app directory already contains vendor/ from local development
# We're copying it here to optimize the autoloader for production
COPY ./app/ $APP_DIR/

# Install and optimize Composer dependencies for production
# --no-dev: Exclude development dependencies
# --optimize-autoloader: Generate optimized autoloader with class map
# --no-interaction: Run without prompts
# --ignore-platform-reqs: Ignore PHP extension requirements (extensions are in production stage)
# This ensures all dependencies are installed and optimized for production
RUN if [ -f composer.json ]; then \
        composer install --no-dev --optimize-autoloader --no-interaction --ignore-platform-reqs || \
        echo "Composer install completed with warnings"; \
    fi

# Clean up APK cache to reduce layer size
RUN rm -rf /var/cache/apk/*

# ==============================================================================
# Stage 3: Production Runtime
# ==============================================================================
# Purpose: Final production image with minimal runtime dependencies
# Why: Keeps final image small and secure with only what's needed to run
# ==============================================================================
FROM robjects/dhi-php-mirror-robjects:8.3-alpine3.22-dev AS production

# Re-declare build arguments for this stage
ARG UID=1000
ARG GID=1000

# Set environment variables
ENV UID=${UID}
ENV GID=${GID}
ENV APP_DIR=/var/www/html
ENV APP_ENV=production
ENV PHP_INI_DIR=/etc/php83

# Set working directory
WORKDIR $APP_DIR

# ==============================================================================
# Install Runtime Packages and PHP Extensions
# ==============================================================================
# Single RUN command to minimize layers and image size
# Packages are organized by category for clarity
# ==============================================================================
RUN apk add --no-cache \
    # Core system utilities
    curl \
    wget \
    unzip \
    bash \
    \
    # Image processing
    imagemagick \
    \
    # Web server
    nginx \
    \
    # Database client
    mysql-client \
    \
    # Caching server (for local development/testing)
    redis \
    \
    # PHP 8.3 core
    php83 \
    php83-cli \
    php83-fpm \
    \
    # PHP extensions - Core functionality
    php83-ctype \
    php83-curl \
    php83-dom \
    php83-fileinfo \
    php83-gd \
    php83-intl \
    php83-mbstring \
    php83-opcache \
    php83-openssl \
    php83-phar \
    php83-session \
    php83-tokenizer \
    php83-xml \
    php83-xmlreader \
    php83-xmlwriter \
    php83-simplexml \
    \
    # PHP extensions - Database
    php83-pdo_mysql \
    php83-pdo_sqlite \
    php83-mysqli \
    \
    # PHP extensions - Additional functionality
    php83-bcmath \
    php83-sockets \
    php83-zip \
    php83-pcntl \
    \
    # PECL extensions
    php83-pecl-imagick \
    php83-pecl-msgpack \
    php83-redis \
    php83-pecl-xdebug \
    \
    # Clean up APK cache
    && rm -rf /var/cache/apk/*

# ==============================================================================
# Configure Redis (Security: No hardcoded passwords)
# ==============================================================================
# Security Note: Redis password must be set via REDIS_PASSWORD environment
# variable in your .env or stack.env file. DO NOT hardcode passwords here.
# ==============================================================================
RUN mkdir -p /etc/redis && \
    echo "# ========================================================================" > /etc/redis/redis.conf && \
    echo "# Redis Configuration - WillowCMS" >> /etc/redis/redis.conf && \
    echo "# ========================================================================" >> /etc/redis/redis.conf && \
    echo "# SECURITY: All sensitive values must be provided via environment variables" >> /etc/redis/redis.conf && \
    echo "# DO NOT hardcode passwords in this file!" >> /etc/redis/redis.conf && \
    echo "# ========================================================================" >> /etc/redis/redis.conf && \
    echo "" >> /etc/redis/redis.conf && \
    echo "bind *********" >> /etc/redis/redis.conf && \
    echo "protected-mode yes" >> /etc/redis/redis.conf && \
    echo "port 6379" >> /etc/redis/redis.conf && \
    echo "" >> /etc/redis/redis.conf && \
    echo "# Set password via REDIS_PASSWORD environment variable" >> /etc/redis/redis.conf && \
    echo "# Example in .env: REDIS_PASSWORD=your_secure_password" >> /etc/redis/redis.conf

# ==============================================================================
# Copy Configuration Files
# ==============================================================================
# Nginx configuration
COPY infrastructure/docker/willowcms/config/nginx/nginx.conf /etc/nginx/nginx.conf
COPY infrastructure/docker/willowcms/config/nginx/nginx-cms.conf /etc/nginx/conf.d/default.conf

# PHP-FPM configuration
COPY infrastructure/docker/willowcms/config/php/fpm-pool.conf ${PHP_INI_DIR}/php-fpm.d/www.conf
COPY infrastructure/docker/willowcms/config/php/php.ini ${PHP_INI_DIR}/conf.d/custom.ini

# ==============================================================================
# Configure PHP Extensions (Load Order Matters!)
# ==============================================================================
# Note: Some extensions depend on others and must be loaded in correct order:
# 1. igbinary - Binary serialization (required by redis)
# 2. msgpack - MessagePack serialization (required by redis)
# 3. redis - Redis extension (depends on igbinary and msgpack)
# 4. imagick - ImageMagick extension (independent)
# 5. pdo_mysql - MySQL PDO driver (independent)
# 6. mysqli - MySQL improved extension (independent)
# ==============================================================================
RUN echo "extension=igbinary.so" > /etc/php83/conf.d/00-igbinary.ini && \
    echo "extension=msgpack.so" > /etc/php83/conf.d/01-msgpack.ini && \
    echo "extension=redis.so" > /etc/php83/conf.d/02-redis.ini && \
    echo "extension=imagick.so" > /etc/php83/conf.d/03-imagick.ini && \
    echo "extension=pdo_mysql.so" > /etc/php83/conf.d/04-pdo_mysql.ini && \
    echo "extension=mysqli.so" > /etc/php83/conf.d/05-mysqli.ini

# Also configure for the base image PHP installation
RUN echo "extension=/usr/lib/php83/modules/igbinary.so" > /opt/php-8.3/etc/php/conf.d/10-igbinary.ini && \
    echo "extension=/usr/lib/php83/modules/msgpack.so" > /opt/php-8.3/etc/php/conf.d/20-msgpack.ini && \
    echo "extension=/usr/lib/php83/modules/redis.so" > /opt/php-8.3/etc/php/conf.d/30-redis.ini && \
    echo "extension=/usr/lib/php83/modules/imagick.so" > /opt/php-8.3/etc/php/conf.d/40-imagick.ini && \
    echo "extension=/usr/lib/php83/modules/pdo_mysql.so" > /opt/php-8.3/etc/php/conf.d/50-pdo_mysql.ini && \
    echo "extension=/usr/lib/php83/modules/mysqli.so" > /opt/php-8.3/etc/php/conf.d/51-mysqli.ini

# ==============================================================================
# Create Service Startup Script
# ==============================================================================
# This script starts both PHP-FPM and Nginx in the correct order
# PHP-FPM must be started first and run in background (&)
# Nginx runs in foreground (daemon off) to keep container alive
# ==============================================================================
RUN mkdir -p /usr/local/bin && \
    echo '#!/bin/sh' > /usr/local/bin/start-services.sh && \
    echo 'set -e' >> /usr/local/bin/start-services.sh && \
    echo '' >> /usr/local/bin/start-services.sh && \
    echo 'echo "=================================================================="' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Starting WillowCMS Services"' >> /usr/local/bin/start-services.sh && \
    echo 'echo "=================================================================="' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Platform: $(uname -m)"' >> /usr/local/bin/start-services.sh && \
    echo 'echo "User: $(whoami) (UID: $(id -u), GID: $(id -g))"' >> /usr/local/bin/start-services.sh && \
    echo 'echo "PHP Version: $(php -v | head -n 1)"' >> /usr/local/bin/start-services.sh && \
    echo 'echo "App Directory: $APP_DIR"' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Environment: $APP_ENV"' >> /usr/local/bin/start-services.sh && \
    echo 'echo "=================================================================="' >> /usr/local/bin/start-services.sh && \
    echo '' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Starting PHP-FPM..."' >> /usr/local/bin/start-services.sh && \
    echo 'php-fpm83 -F &' >> /usr/local/bin/start-services.sh && \
    echo 'PHP_FPM_PID=$!' >> /usr/local/bin/start-services.sh && \
    echo 'echo "PHP-FPM started with PID: $PHP_FPM_PID"' >> /usr/local/bin/start-services.sh && \
    echo '' >> /usr/local/bin/start-services.sh && \
    echo 'sleep 2' >> /usr/local/bin/start-services.sh && \
    echo '' >> /usr/local/bin/start-services.sh && \
    echo 'echo "Starting Nginx..."' >> /usr/local/bin/start-services.sh && \
    echo 'exec nginx -g "daemon off;"' >> /usr/local/bin/start-services.sh && \
    chmod +x /usr/local/bin/start-services.sh

# ==============================================================================
# Create Runtime Directories (BEFORE user creation)
# ==============================================================================
# CakePHP requires specific directories to be writable:
# - tmp/: Cache, sessions, and temporary files
# - logs/: Application logs
# - webroot/files/: User-uploaded content
# - ImageGalleries/: Image gallery uploads and previews
#
# System directories that need correct ownership:
# - /run: PHP-FPM socket location
# - /var/lib/nginx: Nginx runtime files
# - /var/log/nginx: Nginx logs
# - /tmp/redis: Redis temporary files
# ==============================================================================
RUN mkdir -p \
    /var/www/html/tmp/archives \
    /var/www/html/tmp/cache \
    /var/www/html/tmp/cache/models \
    /var/www/html/tmp/cache/persistent \
    /var/www/html/tmp/cache/views \
    /var/www/html/tmp/sessions \
    /var/www/html/tmp/tests \
    /var/www/html/logs \
    /var/www/html/webroot/files \
    /var/www/html/webroot/files/ImageGalleries \
    /var/www/html/webroot/files/ImageGalleries/preview \
    /run \
    /var/lib/nginx \
    /var/lib/nginx/tmp \
    /var/log/nginx \
    /tmp/redis

# ==============================================================================
# Create Non-Root User with Flexible UID/GID
# ==============================================================================
# This handles potential GID conflicts gracefully:
# - If GID exists, check what group it belongs to
# - If it's an acceptable group (like 'users' or 'staff'), use it
# - Otherwise, create willowcms group with available GID
# - Create willowcms user with specified UID
# ==============================================================================
RUN set -eux; \
    # Check if GID already exists and get the group name (Alpine Linux compatible)
    EXISTING_GROUP=$(grep ":${GID}:" /etc/group | cut -d: -f1 || echo ""); \
    \
    if [ -z "$EXISTING_GROUP" ]; then \
        # GID doesn't exist, create new group
        addgroup -g ${GID} willowcms; \
        GROUP_NAME="willowcms"; \
        echo "Created new group: willowcms (GID: ${GID})"; \
    else \
        # GID exists, use existing group
        echo "GID ${GID} already exists for group: $EXISTING_GROUP"; \
        GROUP_NAME="$EXISTING_GROUP"; \
    fi; \
    \
    # Check if UID already exists
    EXISTING_USER=$(grep ":x:${UID}:" /etc/passwd | cut -d: -f1 || echo ""); \
    \
    if [ -n "$EXISTING_USER" ]; then \
        echo "WARNING: UID ${UID} already exists for user: $EXISTING_USER"; \
        echo "Using UID ${UID} anyway as requested"; \
    fi; \
    \
    # Create user with specified UID and assign to the group
    adduser -D -u ${UID} -G "$GROUP_NAME" -h /home/willowcms -s /bin/bash willowcms; \
    \
    # Verify user creation
    echo "Created user: willowcms (UID: $(id -u willowcms), GID: $(id -g willowcms))"; \
    id willowcms

# ==============================================================================
# Copy Application Code from Dependencies Stage
# ==============================================================================
# This copies the optimized application with production-ready autoloader
# Ownership is set to the willowcms user for security
# ==============================================================================
COPY --from=dependencies --chown=${UID}:${GID} /var/www/html $APP_DIR/

# ==============================================================================
# Set Proper Ownership and Permissions
# ==============================================================================
# This must happen after user creation and file copying
# ==============================================================================
RUN set -eux; \
    # Set ownership to willowcms user by UID:GID (more reliable than username)
    chown -R ${UID}:${GID} \
        /var/www/html \
        /run \
        /var/lib/nginx \
        /var/log/nginx \
        /tmp/redis && \
    \
    # Set proper permissions
    # 755: Owner can read/write/execute, others can read/execute
    # 775: Owner and group can read/write/execute, others can read/execute
    chmod -R 755 /var/www/html/tmp && \
    chmod -R 755 /var/www/html/logs && \
    chmod -R 755 /var/www/html/webroot/files && \
    chmod 755 /usr/local/bin/start-services.sh && \
    \
    # Verify ownership
    ls -la /var/www/html | head -n 10

# ==============================================================================
# Switch to Non-Root User
# ==============================================================================
# Security best practice: Run application as non-root user
# This limits potential damage if the application is compromised
# ==============================================================================
USER willowcms

# ==============================================================================
# Expose HTTP Port
# ==============================================================================
EXPOSE 80

# ==============================================================================
# Health Check Configuration
# ==============================================================================
# Validates that the application is responding correctly
# - interval: How often to check (30s)
# - timeout: How long to wait for response (3s)
# - start-period: Grace period during container startup (5s)
# - retries: How many failures before marking unhealthy (3)
# ==============================================================================
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl --silent --fail http://localhost:80/fpm-ping || exit 1

# ==============================================================================
# Start Services
# ==============================================================================
CMD ["/usr/local/bin/start-services.sh"]

# ==============================================================================
# Docker Labels - Container Metadata
# ==============================================================================
LABEL maintainer="WillowCMS Team <admin@willowcms.local>" \
      description="Enhanced multi-stage WillowCMS with CakePHP 5.x optimization and security hardening" \
      version="1.0.0-enhanced" \
      org.opencontainers.image.source="https://github.com/matthewdeaves/willow" \
      org.opencontainers.image.vendor="WillowCMS" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.title="WillowCMS Enhanced" \
      org.opencontainers.image.description="Production-ready CakePHP 5.x CMS with multi-stage builds, security hardening, and multi-platform support" \
      org.opencontainers.image.documentation="https://github.com/matthewdeaves/willow/blob/main/README.md" \
      security.features="non-root-user,no-hardcoded-secrets,minimal-attack-surface" \
      platform.support="linux/amd64,linux/arm64"

# ==============================================================================
# Build Information
# ==============================================================================
# To build this Dockerfile:
#   docker build -f infrastructure/docker/willowcms/Dockerfile.enhanced \
#     --build-arg UID=1000 --build-arg GID=1000 \
#     -t willowcms:enhanced .
#
# To build for multiple platforms:
#   docker buildx build --platform linux/amd64,linux/arm64 \
#     -f infrastructure/docker/willowcms/Dockerfile.enhanced \
#     -t willowcms:enhanced .
#
# To use with docker compose:
#   Update docker-compose.yml to point to this Dockerfile:
#   dockerfile: infrastructure/docker/willowcms/Dockerfile.enhanced
# ==============================================================================
