<?php
declare(strict_types=1);

/**
 * Controller Test Generator
 * 
 * Generates PHPUnit test files for all controllers in the WillowCMS application
 * Creates smoke tests for both authenticated and unauthenticated scenarios
 */

require __DIR__ . '/../../vendor/autoload.php';

use Cake\Utility\Inflector;

// Configuration
$appPath = dirname(__DIR__, 2);
$controllerPath = $appPath . '/src/Controller';
$testPath = $appPath . '/tests/TestCase/Controller';
$templatesPath = __DIR__ . '/templates';
$manifestPath = __DIR__ . '/controller_manifest.json';

// Load controller manifest (generated by analyze_controllers.php)
if (!file_exists($manifestPath)) {
    echo "❌ Controller manifest not found. Run analyze_controllers.php first.\n";
    exit(1);
}

$manifest = json_decode(file_get_contents($manifestPath), true);

echo "🚀 WillowCMS Controller Test Generator\n";
echo "======================================\n\n";

/**
 * Generate test file for a controller
 *
 * @param array $controllerData Controller metadata
 * @param string $templatesPath Path to templates directory
 * @param string $testPath Path to test output directory
 * @return string Output file path
 */
function generateTestFile(array $controllerData, string $templatesPath, string $testPath): string
{
    // Select template based on controller type
    $templateFile = match($controllerData['type']) {
        'admin' => 'admin_controller_test_template.php',
        'api' => 'api_controller_test_template.php',
        default => 'controller_test_template.php'
    };
    
    $template = file_get_contents($templatesPath . '/' . $templateFile);
    
    // Extract controller name without "Controller" suffix
    $controllerName = str_replace('Controller.php', '', basename($controllerData['file_path']));
    
    // Generate test methods
    $testMethods = generateTestMethods($controllerData);
    
    // Generate fixtures list
    $fixtures = generateFixturesList($controllerData);
    
    // Replace placeholders
    $content = str_replace([
        '{{CONTROLLER_NAME}}',
        '{{ADDITIONAL_FIXTURES}}',
        '{{TEST_METHODS}}'
    ], [
        $controllerName,
        $fixtures,
        $testMethods
    ], $template);
    
    // Determine output path
    $namespace = $controllerData['type'] === 'admin' ? 'Admin/' : ($controllerData['type'] === 'api' ? 'Api/' : '');
    $outputPath = $testPath . '/' . $namespace . $controllerName . 'ControllerTest.php';
    
    // Create directory if needed
    $dir = dirname($outputPath);
    if (!is_dir($dir)) {
        mkdir($dir, 0755, true);
    }
    
    // Write file
    file_put_contents($outputPath, $content);
    
    return $outputPath;
}

/**
 * Generate test methods for controller
 *
 * @param array $controllerData Controller metadata
 * @return string Generated test methods code
 */
function generateTestMethods(array $controllerData): string
{
    $methods = '';
    $publicMethods = $controllerData['public_methods'];
    $unauthenticatedMethods = $controllerData['unauthenticated_methods'] ?? [];
    
    foreach ($publicMethods as $method) {
        // Skip inherited methods from AppController
        if (in_array($method, ['initialize', 'beforeFilter', 'beforeRender', 'afterFilter'])) {
            continue;
        }
        
        $isUnauthenticated = in_array($method, $unauthenticatedMethods);
        
        // Generate tests based on controller type and auth requirements
        if ($controllerData['type'] === 'admin') {
            $methods .= generateAuthenticatedAdminTest($method, $controllerData);
            $methods .= generateUnauthenticatedAdminTest($method, $controllerData);
        } elseif ($controllerData['type'] === 'api') {
            $methods .= generateApiTest($method, $controllerData);
        } else {
            // Root controller - test based on auth requirements
            if ($isUnauthenticated) {
                $methods .= generateUnauthenticatedTest($method, $controllerData);
            } else {
                $methods .= generateAuthenticatedTest($method, $controllerData);
                $methods .= generateUnauthenticatedTest($method, $controllerData);
            }
        }
    }
    
    return $methods;
}

/**
 * Generate unauthenticated test method
 *
 * @param string $method Method name
 * @param array $controllerData Controller metadata
 * @return string Test method code
 */
function generateUnauthenticatedTest(string $method, array $controllerData): string
{
    $methodName = ucfirst($method);
    $urlPath = getUrlPath($method, $controllerData);
    
    return <<<PHP

    /**
     * Test {$method} method - Unauthenticated access
     *
     * @return void
     */
    public function test{$methodName}Unauthenticated(): void
    {
        \$this->mockUnauthenticatedRequest();
        \$this->get('{$urlPath}');
        
        // Smoke test: verify page responds (may be 200 or 302 redirect)
        \$this->assertResponseCode([200, 302], 'Response should be OK or redirect');
    }

PHP;
}

/**
 * Generate authenticated test method
 *
 * @param string $method Method name
 * @param array $controllerData Controller metadata
 * @return string Test method code
 */
function generateAuthenticatedTest(string $method, array $controllerData): string
{
    $methodName = ucfirst($method);
    $urlPath = getUrlPath($method, $controllerData);
    
    return <<<PHP

    /**
     * Test {$method} method - Authenticated access
     *
     * @return void
     */
    public function test{$methodName}Authenticated(): void
    {
        \$this->mockAuthenticatedUser();
        \$this->get('{$urlPath}');
        
        // Smoke test: verify page responds successfully
        \$this->assertResponseOk();
    }

PHP;
}

/**
 * Generate admin authenticated test method
 *
 * @param string $method Method name
 * @param array $controllerData Controller metadata
 * @return string Test method code
 */
function generateAuthenticatedAdminTest(string $method, array $controllerData): string
{
    $methodName = ucfirst($method);
    $urlPath = getUrlPath($method, $controllerData);
    
    return <<<PHP

    /**
     * Test {$method} method - Admin authenticated access
     *
     * @return void
     */
    public function test{$methodName}AsAdmin(): void
    {
        \$this->mockAdminUser();
        \$this->get('{$urlPath}');
        
        // Smoke test: verify admin can access
        \$this->assertResponseOk();
    }

PHP;
}

/**
 * Generate admin unauthenticated test method
 *
 * @param string $method Method name
 * @param array $controllerData Controller metadata
 * @return string Test method code
 */
function generateUnauthenticatedAdminTest(string $method, array $controllerData): string
{
    $methodName = ucfirst($method);
    $urlPath = getUrlPath($method, $controllerData);
    
    return <<<PHP

    /**
     * Test {$method} method - Requires admin authentication
     *
     * @return void
     */
    public function test{$methodName}RequiresAdmin(): void
    {
        \$this->mockUnauthenticatedRequest();
        \$this->get('{$urlPath}');
        
        // Should redirect to login or home
        \$this->assertRedirect();
    }

PHP;
}

/**
 * Generate API test method
 *
 * @param string $method Method name
 * @param array $controllerData Controller metadata
 * @return string Test method code
 */
function generateApiTest(string $method, array $controllerData): string
{
    $methodName = ucfirst($method);
    $urlPath = getUrlPath($method, $controllerData);
    
    return <<<PHP

    /**
     * Test {$method} API method
     *
     * @return void
     */
    public function test{$methodName}Api(): void
    {
        \$this->get('{$urlPath}');
        
        // Smoke test: verify API responds with JSON
        \$this->assertResponseOk();
        \$this->assertJsonResponse();
    }

PHP;
}

/**
 * Get URL path for controller action
 *
 * @param string $method Method name
 * @param array $controllerData Controller metadata
 * @return string URL path
 */
function getUrlPath(string $method, array $controllerData): string
{
    $controller = str_replace('Controller.php', '', basename($controllerData['file_path']));
    $controller = Inflector::dasherize($controller);
    
    $prefix = match($controllerData['type']) {
        'admin' => '/admin',
        'api' => '/api',
        default => ''
    };
    
    $action = $method === 'index' ? '' : '/' . Inflector::dasherize($method);
    
    return "{$prefix}/{$controller}{$action}";
}

/**
 * Generate fixtures list for test
 *
 * @param array $controllerData Controller metadata
 * @return string Fixtures array code
 */
function generateFixturesList(array $controllerData): string
{
    $fixtures = $controllerData['requires_fixtures'] ?? [];
    
    // Remove Users since it's already in the base template
    $fixtures = array_filter($fixtures, fn($f) => $f !== 'Users');
    
    if (empty($fixtures)) {
        return '';
    }
    
    $fixtureStrings = array_map(fn($f) => "'app.{$f}'", $fixtures);
    return implode(",\n        ", $fixtureStrings);
}

// Main execution
$generatedCount = 0;
$errors = [];
$testMethodCount = 0;

foreach ($manifest as $controllerName => $controllerData) {
    try {
        echo "Generating test for {$controllerName}... ";
        $outputPath = generateTestFile($controllerData, $templatesPath, $testPath);
        
        // Count test methods
        $methodCount = count($controllerData['public_methods']) * 2; // Rough estimate
        $testMethodCount += $methodCount;
        
        echo "✅\n";
        $generatedCount++;
    } catch (Exception $e) {
        echo "❌ Failed: " . $e->getMessage() . "\n";
        $errors[] = [
            'controller' => $controllerName,
            'error' => $e->getMessage()
        ];
    }
}

echo "\n======================================\n";
echo "✅ Generated {$generatedCount} test files\n";
echo "📊 Estimated {$testMethodCount} test methods\n";

if (!empty($errors)) {
    echo "\n❌ " . count($errors) . " errors occurred:\n";
    foreach ($errors as $error) {
        echo "  - {$error['controller']}: {$error['error']}\n";
    }
}

// Save generation report
$report = [
    'generated_at' => date('Y-m-d H:i:s'),
    'total_controllers' => count($manifest),
    'tests_generated' => $generatedCount,
    'test_methods_estimate' => $testMethodCount,
    'errors' => $errors,
    'controllers' => array_keys($manifest)
];

file_put_contents(__DIR__ . '/test_generation_report.json', json_encode($report, JSON_PRETTY_PRINT));
echo "\n📊 Report saved to test_generation_report.json\n";
